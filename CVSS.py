import numpy as np

#undirected graph
class network:
    size = 'size'
    participants = 'participants'

    def __init__(self):
        self.participants = []
        self.size = 0

    def addNode(self, newNode):
        self.participants.append(newNode)
        self.size += 1

    def addEdge(self,u,v):
        indexu = self.participants.index(u)
        indexv = self.participants.index(v)
        try:
            self.participants[indexu].adj.append(v)
            self.participants[indexv].adj.append(u)
        except:
            print("error adding edge")

    #depth-first traversal method
    def vIntroduced(self,root,**kwargs):
        visited = []
        queue = []

        visited.append(root)
        queue.append(root)

        while queue:
            queue[0].influenced(**kwargs)
            next = queue.pop(0)
            # print("next: ",next)

            for children in next.adj:
                if children not in visited:
                    # print(children," not visited")
                    visited.append(children)
                    queue.append(children)


class participant:
    id = 'id'
    type = 'type'
    baseMetric = 'metric'
    baseScore = 'base'
    ebs = 'ebs'
    adj = 'adjNodes'

    def __init__(self,agent_id,agent_type,av,ac,au,c,i,a):
        self.id = agent_id
        self.type = agent_type
        self.adj = []
        self.baseMetric = {"AV":av,"AC":ac,"Au":au,"C":c,"I":i,"A":a}
        self.baseScore = getBaseScore(self.baseMetric)

    def influenced(self,**kwargs):
        for metricType,newValue in kwargs.items():
            tempMetric = self.baseMetric
            tempMetric[metricType] = newValue

        if (getBaseScore(tempMetric) > self.baseScore):
            self.baseMetric[metricType] = newValue
            self.ebs = getBaseScore(self.baseMetric)
        else:
            self.ebs = self.baseScore

def getBaseScore(baseMetric):
    AV,AC,Au,C,I,A = getNum(baseMetric)
    Impact = 10.41*(1-(1-C)*(1-I)*(1-A))
    Exploitability = 20*AV*AC*Au
    fImpact = 0 if Impact==0 else 1.176

    BaseScore = (0.6*Impact+0.4*Exploitability-1.5)*fImpact
    BaseScore = round(BaseScore,1)
    return BaseScore

def getNum(baseMetric):
    switchAV = {
        'Local': 0.395,
        'Adjacent': 0.646,
        'Network': 1.0,
    };

    switchAC = {
        'High': 0.35,
        'Medium': 0.61,
        'Low': 0.71,
    };

    switchAu = {
        'Multiple': 0.45,
        'Single': 0.56,
        'None': 0.704,
    };

    switchImpact = {
        'None': 0.0,
        'Partial': 0.275,
        'Complete': 0.660,
    };

    numAV = switchAV.get(baseMetric["AV"]);
    numAC = switchAC.get(baseMetric["AC"]);
    numAu = switchAu.get(baseMetric["Au"]);
    numC = switchImpact.get(baseMetric["C"]);
    numI = switchImpact.get(baseMetric["I"]);
    numA = switchImpact.get(baseMetric["A"]);

    return numAV,numAC,numAu,numC,numI,numA;








agent1 = participant('id1','type1','Local','High','Multiple','None','Partial','None')
agent2 = participant('id2','type2','Network','Medium','None','Partial','Partial','None')
agent3 = participant('id3','type3','Adjacent','Low','Single','None','Complete','None')
agent4 = participant('id4','type4','Local','Medium','Single','Partial','Complete','Partial')

testn = network()
testn.addNode(agent1)
testn.addNode(agent2)
testn.addNode(agent3)
testn.addNode(agent4)
testn.addEdge(agent1,agent2)
testn.addEdge(agent2,agent3)
testn.addEdge(agent2,agent4)

kwargs = {"AV":"Network","AC":"Low"}
testn.vIntroduced(agent1,**kwargs)
print("agent1: ", agent1.baseScore, agent1.ebs)
print("agent2: ", agent2.baseScore,agent2.ebs)
print("agent3: ", agent3.baseScore,agent3.ebs)
print("agent4: ", agent4.baseScore,agent4.ebs)
